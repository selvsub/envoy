apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: default
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: egress_listener
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: egress_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                - name: all_hosts
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: dynamic_forward_proxy_cluster
              http_filters:
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Helper: convert headers to string
                    local function headers_to_string(headers)
                      local out = {}
                      for key, value in pairs(headers) do
                        table.insert(out, key .. "=" .. value)
                      end
                      return table.concat(out, ", ")
                    end

                    -- Request logging
                    function envoy_on_request(handle)
                      local headers = handle:headers()
                      local method  = headers:get(":method") or ""
                      local path    = headers:get(":path") or ""
                      local host    = headers:get(":authority") or ""
                      handle:logInfo("[LUA] >>> Request: " .. method .. " " .. path .. " Host=" .. host)
                      handle:logInfo("[LUA] Request headers: " .. headers_to_string(headers))

                      local body = handle:body()
                      if body:length() > 0 then
                        local data = body:getBytes(0, body:length())
                        handle:logInfo("[LUA] Request body: " .. data)
                      else
                        handle:logInfo("[LUA] Request body: <empty>")
                      end
                    end

                    -- Response logging
                    function envoy_on_response(handle)
                      local headers = handle:headers()
                      local status  = headers:get(":status") or ""
                      handle:logInfo("[LUA] <<< Response status: " .. status)
                      handle:logInfo("[LUA] Response headers: " .. headers_to_string(headers))

                      local body = handle:body()
                      if body:length() > 0 then
                        local data = body:getBytes(0, body:length())
                        handle:logInfo("[LUA] Response body: " .. data)
                      else
                        handle:logInfo("[LUA] Response body: <empty>")
                      end
                    end

              - name: envoy.filters.http.dynamic_forward_proxy
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                  dns_cache_config:
                    name: dynamic_dns_cache
                    dns_lookup_family: V4_ONLY
                    host_ttl: 86400s
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              access_log:
              - name: envoy.access_loggers.file
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /dev/stdout
                  log_format:
                    text_format_source:
                      inline_string: "[%START_TIME%] %REQ(:METHOD)% %REQ(:AUTHORITY)% %REQ(:PATH)% -> %UPSTREAM_HOST% %RESPONSE_CODE%\n"

      clusters:
      - name: dynamic_forward_proxy_cluster
        connect_timeout: 1s
        lb_policy: CLUSTER_PROVIDED
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
            dns_cache_config:
              name: dynamic_dns_cache
              dns_lookup_family: V4_ONLY
              host_ttl: 86400s
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              validation_context:
                trusted_ca:
                  filename: "/etc/envoy/certs/ca-cert.pem"

    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
      - name: envoy
        image: envoyproxy/envoy:v1.30-latest
        args: ["-c", "/etc/envoy/envoy.yaml"]
        ports:
        - containerPort: 10000  # proxy port
        - containerPort: 9901   # admin / metrics
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
        - name: envoy-certs
          mountPath: /etc/envoy/certs
          readOnly: true
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
      - name: envoy-certs
        configMap:
          name: envoy-certs
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  namespace: default
spec:
  selector:
    app: envoy
  ports:
  - name: proxy
    port: 10000
    targetPort: 10000
  - name: admin
    port: 9901
    targetPort: 9901