apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: default
data:
  envoy.yaml: |
    static_resources:
      listeners:
      - name: egress_listener
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 10000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: egress_http
              codec_type: AUTO
              route_config:
                name: local_route
                virtual_hosts:
                - name: all_hosts
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: dynamic_forward_proxy_cluster
              http_filters:
              - name: envoy.filters.http.buffer
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.buffer.v3.Buffer
                  max_request_bytes: 1048576   # 1MB buffer for request body
              - name: envoy.filters.http.lua
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                  inline_code: |
                    -- Convert Envoy HeaderMap to string
                    function headers_to_string(headers)
                      local parts = {}
                      for i = 0, headers:size() - 1 do
                        local key = headers:getKey(i)
                        local value = headers:get(key)
                        if key ~= nil and value ~= nil then
                          table.insert(parts, key .. ": " .. value)
                        end
                      end
                      return table.concat(parts, ", ")
                    end

                    function envoy_on_request(request_handle)
                      local req_body = ""
                      if request_handle:body():length() > 0 then
                        req_body = request_handle:body():getBytes(0, request_handle:body():length())
                      end
                      local req_headers = request_handle:headers()
                      request_handle:logInfo("Request Headers: " .. headers_to_string(req_headers))
                      request_handle:logInfo("Request Body: " .. req_body)
                    end

                    function envoy_on_response(response_handle)
                      local resp_body = ""
                      if response_handle:body():length() > 0 then
                        resp_body = response_handle:body():getBytes(0, response_handle:body():length())
                      end
                      local resp_headers = response_handle:headers()
                      response_handle:logInfo("Response Headers: " .. headers_to_string(resp_headers))
                      response_handle:logInfo("Response Body: " .. resp_body)
                    end
              - name: envoy.filters.http.dynamic_forward_proxy
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
                  dns_cache_config:
                    name: dynamic_dns_cache
                    dns_lookup_family: V4_ONLY
                    host_ttl: 86400s
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

      clusters:
      - name: dynamic_forward_proxy_cluster
        connect_timeout: 1s
        lb_policy: CLUSTER_PROVIDED
        cluster_type:
          name: envoy.clusters.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig
            dns_cache_config:
              name: dynamic_dns_cache
              dns_lookup_family: V4_ONLY
              host_ttl: 86400s

    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
